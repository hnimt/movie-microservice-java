version: "3"

services:
  eureka:
    image: microservice/server
    container_name: eureka
    hostname: eureka
    build:
      context: .
      dockerfile: ./EurekaServer/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservicesnet

  zuul:
    image: microservice/zuul
    container_name: zuul
    build:
      context: .
      dockerfile: ./ZuulGateway/Dockerfile
    ports:
      - "8762:8762"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
    depends_on:
      - eureka
    networks:
      - microservicesnet

  movie:
    image: microservice/core
    container_name: core
    build:
      context: .
      dockerfile: ./MovieTheatre/Dockerfile
    ports:
      - "8200:8200"
    environment:
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/movie_theatre?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      - spring.datasource.username=root
      - spring.datasource.password=root
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
      - spring.redis.host=redisdb
    depends_on:
      - eureka
      - mysqldb
      - redisdb
    networks:
      - microservicesnet

  auth:
    image: microservice/auth
    container_name: auth
    build:
      context: .
      dockerfile: ./AuthService/Dockerfile
    ports:
      - "9100:9100"
    environment:
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/movie_theatre?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      - spring.datasource.username=root
      - spring.datasource.password=root
      - eureka.client.serviceUrl.defaultZone=http://eureka:8761/eureka
    depends_on:
      - eureka
      - movie
      - mysqldb
    networks:
      - microservicesnet

  mysqldb:
    platform: linux/x86_64
    image: mysql:5.7
    restart: always
    volumes:
    - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
    - "3307:3306"
    networks:
      - microservicesnet

  redisdb:
    container_name: redis
    image: redis
    ports:
    - "6379:6379"
    networks:
    - microservicesnet
    volumes:
    - cache_data:/var/lib/redis

networks:
  microservicesnet:
    driver: bridge

volumes:
  db_data:
  cache_data:

